package threadjava;

class SharedBuffer {
    private int item;
    private boolean available = false;

    // Produce an item
    public synchronized void produce(int value) {
        while (available) { // If the buffer is full, wait
            try {
                wait();
            } catch (InterruptedException e) {
                System.out.println(e);
            }
        }
        item = value;
        available = true;
        System.out.println("Produced: " + item);
        notify(); // Notify the consumer that an item is available
    }

    // Consume an item
    public synchronized void consume() {
        while (!available) { // If the buffer is empty, wait
            try {
                wait();
            } catch (InterruptedException e) {
                System.out.println(e);
            }
        }
        System.out.println("Consumed: " + item);
        available = false;
        notify(); // Notify the producer that the buffer is empty
    }
}

class Producer extends Thread {
    private SharedBuffer buffer;

    public Producer(SharedBuffer buffer) {
        this.buffer = buffer;
    }

    @Override
    public void run() {
        for (int i = 1; i <= 5; i++) {
            buffer.produce(i);
            try {
                Thread.sleep(500); // Simulate time to produce an item
            } catch (InterruptedException e) {
                System.out.println(e);
            }
        }
    }
}

class Consumer extends Thread {
    private SharedBuffer buffer;

    public Consumer(SharedBuffer buffer) {
        this.buffer = buffer;
    }

    @Override
    public void run() {
        for (int i = 1; i <= 5; i++) {
            buffer.consume();
            try {
                Thread.sleep(1000); // Simulate time to consume an item
            } catch (InterruptedException e) {
                System.out.println(e);
            }
        }
    }
}

public class threadjava {
    public static void main(String[] args) {
        SharedBuffer buffer = new SharedBuffer();

        Producer producer = new Producer(buffer);
        Consumer consumer = new Consumer(buffer);

        producer.start();
        consumer.start();
    }
}


Produced: 1
Consumed: 1
Produced: 2
Consumed: 2
Produced: 3
Consumed: 3
Produced: 4
Consumed: 4
Produced: 5
Consumed: 5
